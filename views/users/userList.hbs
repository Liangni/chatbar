<div class="userList-wrapper bg-light d-flex flex-column align-items-center justify-content-center">
    <form action="#" method="GET" class="section-one">
        <div class="no-hidden">
            <div class="search-friends">
                <input type="text" class="userId" name="account" id="userId" placeholder="依ID搜尋">
                <button type="button" class="btn btn-outline-success" id="searchBtn">搜尋</button>
            </div>
            <div class="form-check form-switch switch-user-box">
                <input class="form-check-input me-2" type="checkbox" role="switch" id="flexSwitchCheckChecked">
                <label class="form-check-label" for="flexSwitchCheckChecked">僅顯示朋友</label>
                {{!-- <span style="display: none;">顯示All</span> --}}
            </div>
            <div class="display-filter-cond-buttons-box">
                <div class="display-filter-cond me-2">
                    <button type="button" class="btn btn-outline-primary filter-set">探索設定<i
                            class="fa fa-chevron-down ms-2"></i></button>
                </div>
                <div class="friends-invited">
                    <button type="button" class="btn btn-primary friends-set">交友邀請<i
                            class="fa fa-chevron-up ms-2"></i></button>
                </div>
            </div>
        </div>
        <div class="can-hidden bg-white" style="display: block;">
            <div class="can-hidden-wrapper">
                <div class="clear-cond-box fs-6 fw-bold">
                    <span><i class="fa fa-trash" aria-hidden="true"></i></span>
                    <span>清空條件</span>
                </div>
                <div class="part-one mb-3">
                    <span class="me-4 ms-4 span-title fw-bold">狀態</span>
                    <div class="radio-box d-flex flex-row align-items-center justify-content-between">
                        <div class="me-4">
                            <input type="radio" name="status" id="statusAll" value="All" checked>
                            <label for="statusAll">全部</label>
                        </div>
                        <div class="me-4">
                            <input type="radio" name="status" id="online" value="在線上">
                            <label for="online">在線上</label>
                        </div>
                        <div>
                            <input type="radio" name="status" id="offline" value="離線">
                            <label for="offline">離線</label>
                        </div>
                    </div>
                </div>
                <div class="part-two mb-3">
                    <span class="me-4 ms-4 span-title fw-bold">性別</span>
                    <div class="radio-box d-flex flex-row align-items-center justify-content-between">
                        <div class="me-4">
                            <input type="radio" name="gender" id="genderAll" value="All" checked>
                            <label for="genderAll">全部</label>
                        </div>
                        <div class="me-4">
                            <input type="radio" name="gender" id="male" value="男性">
                            <label for="male">男性</label>
                        </div>
                        <div class="me-4">
                            <input type="radio" name="gender" id="female" value="女性">
                            <label for="女性">女性</label>
                        </div>
                        <div>
                            <input type="radio" name="gender" id="other" value="其他">
                            <label for="other">其他</label>
                        </div>
                    </div>
                </div>
                <div class="part-three d-flex flex-row align-items-start justify-content-start mb-3">
                    <span class="me-4 ms-4 span-title fw-bold">居住地</span>
                    <div class="radio-box me-4 d-flex flex-row align-items-center justify-content-between">
                        <div>
                            <input type="radio" name="area" id="areaAll" value="All" checked>
                            <label for="areaAll">全部</label>
                        </div>
                    </div>
                    <div class="radio-box d-flex flex-column align-items-start justify-content-between">
                        <div>
                            <input type="radio" name="area" id="north" value="臺灣北部">
                            <label for="north">臺灣北部（台北市、新北市、桃園市、新竹市、新竹縣、宜蘭縣、基隆市）</label>
                        </div>
                        <div>
                            <input type="radio" name="area" id="middle" value="臺灣中部">
                            <label for="middle">臺灣中部（台中市、彰化縣、雲林縣、苗栗縣、南投縣）</label>
                        </div>
                        <div>
                            <input type="radio" name="area" id="south" value="臺灣南部">
                            <label for="south">臺灣南部（高雄市、台南市、嘉義市、嘉義縣、屏東縣）</label>
                        </div>
                        <div>
                            <input type="radio" name="area" id="east" value="臺灣東部">
                            <label for="east">臺灣東部（台東縣、花蓮縣、澎湖縣、金門縣、連江縣）</label>
                        </div>
                    </div>
                </div>
                <div class="part-four d-flex flex-column align-items-start justify-content-start">
                    <div class="top d-flex flex-row align-items-center" id="interestForm">
                        <span class="me-4 ms-4 span-title fw-bold">興趣</span>
                        <input type="text" class="me-2" name="interest" id="interest" placeholder="請輸入關鍵字">
                        <button type="button" id="addInterestButton" class="btn btn-primary"
                            style="height: 2rem;line-height:0;font-weight:bold;">+</button>
                    </div>
                    <div class="bottom d-flex flex-row align-items-center pt-1 pb-1" id="renderInterestWrapper">
                        {{!-- display interest item here --}}
                    </div>
                </div>
            </div>
        </div>
    </form>
    <div class="section-two" style="display: none; margin-bottom: 10px;">
        <div class="friends-invite-wrapper d-flex flex-column align-items-center justify-content-center">
            <h5 class="fw-bold" style="width: 100%;">交友邀請</h5>
            <div class="friends-invite-list-box">
                <span>目前沒有交友邀請!</span>
                {{!-- Insert card-items through DOM --}}
            </div>
        </div>
    </div>
    <div class="section-three">
        <div class="all-users-wrapper bg-white d-flex flex-row flex-wrap justify-content-start" data-info="users">
            {{#if users}}
            <h4 data-info="no-matched-user" style="display:none;">沒有符合篩選條件的使用者</h4>
            {{#each users}}
            <div class="card card-item" data-info="user" data-user-id="{{this.id}}"
                data-friendship-role="{{this.friendshipRole}}">
                <img src="{{#if this.avatar}}{{this.avatar}}{{else}}/image/users.webp{{/if}}" class="card-img-top"
                    data-user="avatar" alt="...">
                <div class="card-body">
                    <p class="fs-14-bold mb-1">
                        <span data-user="account">{{this.account}}</span>
                    </p>
                    <p class="fs-12 mb-1">
                        <span data-user="district">{{this.District.name}}</span>
                        <span data-user="area" hidden="hidden">{{this.District.Area.name}}</span>
                        <span data-user="gender">{{this.Gender.name}}</span>
                        <span data-user="age">{{this.age}}歲</span>
                        <span class="status-light green" data-user="status-light"></span>
                        <span data-user="status">在線上</span>
                    </p>
                    <p class="fs-12 mb-2" data-user="interests">
                        {{#each this.CurrentInterests}}
                        <span class="user-interest-item">#<span data-user="interest">{{this.name}}</span></span>
                        {{/each}}
                    </p>
                    <p class="card-text fs-12" data-user="intro">{{#if this.intro}}{{this.intro}}{{else}}目前沒有自我介紹{{/if}}
                    </p>
                </div>
                <div class="button-box action">
                    {{#ifCond this.friendshipRole null}}
                    <form action="/users/{{../this.id}}/friendshipInvitations/" method="POST">
                        <button class="btn btn-primary" type="submit">送出交友邀請</button>
                    </form>
                    {{/ifCond}}
                    {{#ifCond this.friendshipRole 'invitationSender'}}
                    <form action="/users/{{../this.id}}/friendships?" method="POST"
                        data-user="accept-friendship-invitation" style="display: inline;">
                        <button class="btn btn-primary me-2" type="submit">接受邀請</button>
                    </form>
                    <form action="/users/{{../this.id}}/friendshipInvitations?_method=DELETE" method="POST"
                        data-user="delete-friendship-invitation" style="display: inline;">
                        <button class="btn btn-danger" type="submit">忽略</button>
                    </form>
                    {{/ifCond}}
                    {{#ifCond this.friendshipRole 'invitationReciever'}}
                    <button type="button" class="btn btn-secondary dropdown-toggle" data-bs-toggle="dropdown"
                        aria-expanded="false">
                        等待接受邀請
                    </button>
                    <ul class="dropdown-menu">
                        <li>
                            <form action="/users/{{../this.id}}/friendshipInvitations?_method=DELETE" method="POST">
                                <button class="ms-2" type="submit">收回交友邀請</button>
                            </form>
                        </li>
                    </ul>
                    {{/ifCond}}
                    {{#ifCond this.friendshipRole 'friend'}}
                    <button type="button" class="btn btn-success dropdown-toggle me-2" data-bs-toggle="dropdown"
                        aria-expanded="false">
                        朋友
                    </button>
                    <ul class="dropdown-menu">
                        <li>
                            <form action="/users/{{../this.id}}/friendships?_method=DELETE" method="POST">
                                <button class="ms-2" type="submit">解除朋友關係</button>
                            </form>
                        </li>
                    </ul>
                    <a href="/users/loginUser/privateMessages?userId={{../this.id}}" class="btn btn-primary">Chat</a>
                    {{/ifCond}}
                </div>
            </div>
            {{/each}}
            {{else}}
            <h4>目前沒有其他使用者</h4>
            {{/if}}
        </div>
    </div>
</div>

<script>
    const displayFilterViewButtons = document.querySelector('.display-filter-cond-buttons-box'),
        clearCondButton = document.querySelector('.clear-cond-box'),
        userListWrapper = document.querySelector('.userList-wrapper'),
        userFilter = {}

    // socket事件
    socket.emit("fetchOnlineUserIds")

    socket.on('getOnlineUserIds', (onlineUserIds) => {
        const userCards = document.querySelectorAll('[data-info="user"]')
        userCards.forEach(userCard => {
            if (onlineUserIds.includes(Number(userCard.dataset.userId))) return displayOnline(userCard)
            displayOffline(userCard)
        })
    })

    socket.on('newLogin', (userGroupIds, userId) => {
        const userCards = document.querySelectorAll(`[data-info="user"][data-user-id="${userId}"]`)
        userCards.forEach(userCard => {
            displayOnline(userCard)
        })
    })

    socket.on('newLogout', (userGroupIds, userId) => {
        const userCards = document.querySelectorAll(`[data-info="user"][data-user-id="${userId}"]`)
        userCards.forEach(userCard => {
            displayOffline(userCard)
        })
    })

    // 元素操作事件
    displayFilterViewButtons.addEventListener('click', e => {
        const filterHiddenWrapper = document.querySelector('.can-hidden')
        const friendsInviteWrapper = document.querySelector('.section-two')
        
        if (e.target.tagName !== 'BUTTON') return

        if (e.target.classList.contains('filter-set')) {
            toggleDisplay(e.target, filterHiddenWrapper)
            // 若隔壁按鈕箭頭向上表示對應清單收合，直接結束處理；反之，則toggle以收合
            const btnfriendsSet = document.querySelector('.btn.friends-set')
            if (btnfriendsSet.firstElementChild.classList.contains('fa-chevron-up')) return
            return toggleDisplay(btnfriendsSet, friendsInviteWrapper)
        }

        if (e.target.classList.contains('friends-set')) {
            axios.get('/api/users/loginUser/friendshipInviations/senders')
                .then((response) => {
                    const data = response.data
                    if (data.status !== 'success') throw new Error(data.message)

                    const friendsInviteListBox = document.querySelector('.friends-invite-list-box')
                    const friendshipInvitationSenders = data.friendshipInvitationSenders
                    if (friendshipInvitationSenders.length) {
                        // 清空好友邀請清單預設「目前沒有任何邀請」的文字訊息
                        friendsInviteListBox.innerText = ''
                    }
                    // 對friendshipInvitationSenders陣列做處理，將對應的使用者卡片插入使用者清單
                    // 若friendshipInvitationSenders是空陣列，則會跳過上述處理
                    friendshipInvitationSenders.forEach(sender => {
                        // 複製發送邀請者的卡片元素
                        const invitationSenderCard = document.querySelector('.card-item[data-friendship-role = "invitationSender"]')
                        const CardClone = invitationSenderCard.cloneNode(true)

                        // 整理邀請者的使用者資料
                        let { avatar, intro, account, district, gender, age, CurrentInterests, id } = sender
                        avatar = avatar ? avatar : '/image/users.webp'
                        intro = intro ? intro : '目前沒有自我介紹'

                        // 將資料塞進複製的卡片元素
                        CardClone.dataset.userId = id
                        CardClone.querySelector('[data-user = "avatar"]').src = avatar
                        CardClone.querySelector('[data-user = "account"]').innerText = account
                        CardClone.querySelector('[data-user = "district"]').innerText = district
                        CardClone.querySelector('[data-user = "gender"]').innerText = gender
                        CardClone.querySelector('[data-user = "age"]').innerText = age
                        CardClone.querySelector('[data-user = "intro"]').innerText = intro
                        let interestHTMLTemplate = ''
                        CurrentInterests.forEach(i => {
                            interestHTMLTemplate += `<span class="user-interest-item"># <span data-user="interest">${i.name}</span></span>`
                        })
                        CardClone.querySelector('[data-user = "interests"]').innerHTML = interestHTMLTemplate
                        CardClone.querySelector('[data-user="accept-friendship-invitation"]').action = `/users/${id}/friendships?`
                        CardClone.querySelector('[data-user="delete-friendship-invitation"]').action = `/users/${id}/friendshipInvitations?_method=DELETE`
                        // 將卡片元素插入好友邀請清單
                        friendsInviteListBox.appendChild(CardClone)
                    })
                    // 更新所有使用者卡片的顯示的上線狀態
                    socket.emit("fetchOnlineUserIds")
                    // 顯示好友邀請清單
                    toggleDisplay(e.target, friendsInviteWrapper)
                    // 若隔壁按鈕箭頭向上表示對應清單收合，直接結束處理；反之，則toggle以收合
                    const btnfilterSet = document.querySelector('.btn.filter-set')
                    if (btnfilterSet.firstElementChild.classList.contains('fa-chevron-up')) return
                    return toggleDisplay(btnfilterSet, filterHiddenWrapper)
                })
                .catch((err) => {
                    alert(`有地方出錯了！請截圖彈跳視窗給開發人員，我們會盡快排除故障${err}`)
                })
        }
    })

    userListWrapper.addEventListener('click', function onBtnClicked(e) {
        if (e.target.id === 'searchBtn') {
            const searchInput = document.querySelector('Input[name = "account"]')
            userFilter.account = searchInput.value.trim()
            filterUsers(userFilter)
        }

        if (e.target.id === 'addInterestButton') {
            const interestInput = document.querySelector('#interest')
            const renderInterestWrapper = document.querySelector('#renderInterestWrapper')
            const value = interestInput.value
            if (value.trim() === '') return

            renderInterestWrapper.innerHTML += `
                <button type="button" class="interest-item me-3 fs-12" onclick="removeInterest(this)">
                    X <span>${value}<span>
                </button>
            `
            // 篩選user
            if (!userFilter.interests) userFilter.interests = []
            userFilter.interests.push(value)
            filterUsers(userFilter)
            // 清空input
            interestInput.value = ''
        }
    })

    clearCondButton.addEventListener('click', e => {
        const statusAll = document.querySelector('#statusAll'),
            online = document.querySelector('#online'),
            offline = document.querySelector('#offline'),
            genderAll = document.querySelector('#genderAll'),
            male = document.querySelector('#male'),
            female = document.querySelector('#female'),
            other = document.querySelector('#other'),
            areaAll = document.querySelector('#areaAll'),
            north = document.querySelector('#north'),
            middle = document.querySelector('#middle'),
            south = document.querySelector('#south'),
            east = document.querySelector('#east'),
            renderInterestWrapper = document.querySelector('#renderInterestWrapper')

        if (online.checked || offline.checked || statusAll.checked) {
            statusAll.checked = true
            online.checked = false
            offline.checked = false
            userFilter.status = 'All'
        }

        if (male.checked || female.checked || other.checked || genderAll.checked) {
            genderAll.checked = true
            male.checked = false
            female.checked = false
            other.checked = false
            userFilter.gender = 'All'
        }

        if (north.checked || middle.checked || south.checked || east.checked || areaAll.checked) {
            areaAll.checked = true
            north.checked = false
            middle.checked = false
            south.checked = false
            east.checked = false
            userFilter.area = 'All'
        }

        if (renderInterestWrapper.innerHTML) {
            renderInterestWrapper.innerHTML = ''
            userFilter.interests = []
        }

        filterUsers(userFilter)
    })

    userListWrapper.addEventListener('change', function onInputChanged(e) {

        const targetInput = event.target
        if (targetInput.type === "text") return

        // 整理篩選條件
        if (targetInput.type === "checkbox") {
            if (targetInput.checked === true) userFilter.friendshipRole = 'friend'
            else userFilter.friendshipRole = 'All'
        }
        if (targetInput.type === "radio") userFilter[targetInput.name] = targetInput.value

        // 篩選user
        filterUsers(userFilter)

    })

    // 函式
    function filterUsers(filterObj) {
        const userCardsContainer = document.querySelector('[data-info="users"]')
        const userCards = userCardsContainer.querySelectorAll('[data-info="user"]')
        if (!userCards.length) return

        // 檢查每個user是否符合篩選條件
        userCards.forEach(userCard => {
            let displaySetting = 'block'
            // 逐一檢查filter物件的項目，如user有一項不符合則不顯示
            for (key in filterObj) {
                const filterValue = filterObj[key]

                switch (key) {
                    case 'friendshipRole':
                        if (filterValue !== 'All' && filterValue !== userCard.dataset.friendshipRole) displaySetting = 'none'
                        break
                    case 'account':
                        const userAccountBox = userCard.querySelector('[data-user = "account"]')
                        if (!filterValue) break

                        const re = new RegExp(`${filterValue}`, 'i')
                        if (!re.test(userAccountBox.innerText)) displaySetting = 'none'
                        break
                    case 'interests':
                        const userInterestBoxes = userCard.querySelectorAll('[data-user = "interest"]')
                        let isMatchedFilter = false
                        if (!filterValue.length) break

                        userInterestBoxes.forEach(box => { 
                            filterValue.forEach(eachValue => {
                                const re = new RegExp(`${eachValue}`, 'i')
                                if (re.test(box.innerText)) isMatchedFilter = true
                            })
                        })
                        if (!isMatchedFilter) displaySetting = 'none'
                        break
                    default:
                        const userElementMatchingKey = userCard.querySelector(`[data-user = "${key}"]`)
                        if (filterValue !== 'All' && filterValue !== userElementMatchingKey.innerText) displaySetting = 'none'
                }
            }

            userCard.style.display = displaySetting
        })

        const shownUserCards = userCardsContainer.querySelectorAll('[data-info="user"][style="display: block;"]')

        if (!shownUserCards.length) return userCardsContainer.querySelector('[data-info="no-matched-user"]').style.display = 'block'

        userCardsContainer.querySelector('[data-info="no-matched-user"]').style.display = 'none'

    }

    function toggleDisplay(toggleBtn, targetWrapper) {
        if (toggleBtn.firstElementChild.classList.contains('fa-chevron-up')) {
            toggleBtn.classList.remove('btn-primary')
            toggleBtn.classList.add('btn-outline-primary')
            targetWrapper.style.display = 'block'
            toggleBtn.firstElementChild.classList.remove('fa-chevron-up')
            toggleBtn.firstElementChild.classList.add('fa-chevron-down')
        } else if (toggleBtn.firstElementChild.classList.contains('fa-chevron-down')) {
            toggleBtn.classList.remove('btn-outline-primary')
            toggleBtn.classList.add('btn-primary')
            targetWrapper.style.display = 'none'
            toggleBtn.firstElementChild.classList.remove('fa-chevron-down')
            toggleBtn.firstElementChild.classList.add('fa-chevron-up')
        }
    }

    function removeInterest(element) {
        userFilter.interests.splice(userFilter.interests.indexOf(element.querySelector('span').innerText), 1)
        filterUsers(userFilter)

        element.remove()
    }

    function displayOnline(userCard) {
        userCard.querySelector('[data-user="status-light"]').classList.remove('gray')
        userCard.querySelector('[data-user="status-light"]').classList.add('green')
        userCard.querySelector('[data-user="status"]').innerText = '在線上'
    }

    function displayOffline(userCard) {
        userCard.querySelector('[data-user="status-light"]').classList.remove('green')
        userCard.querySelector('[data-user="status-light"]').classList.add('gray')
        userCard.querySelector('[data-user="status"]').innerText = '離線'
    }

</script>