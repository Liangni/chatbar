<div class="groupChats-wrapper">
    <div class="top-box d-flex flex-column justify-content-center">
        <div class="search-chat-room-box d-flex flex-row mb-3" data-cond="room_title">
            <select name="filterCond" class="me-2" id="filterCond">
                <option value="room_title">話題名稱</option>
                <option value="initiator_id">話題主ID</option>
            </select>
            <div class="search-room d-flex flex-row">
                <i class="fa fa-search"></i>
                <input type="text" name="keyword" id="keyword" placeholder="請輸入話題名稱">
            </div>
        </div>
        <form action="/groupChats" method="POST" class="create-chat-room-box">
            <input name="name" type="text" class="me-2" maxlength="30" placeholder="今天想聊什麼?">
            <button class="btn btn-primary" type="submit">開新話題</button>
        </form>
    </div>
    <hr>
    <div class="bottom-box d-flex flex-column align-items-center mt-2">
        <div class="table-head">
            <span class="group-chat-name">話題名稱</span>
            <span class="group-chat-user-account">話題主ID</span>
            <span class="group-chat-online-user-count" id="sortByOnline">上線人數<i class="fa fa-chevron-up ms-2"></i><i
                    class="fa fa-chevron-down ms-2 "></i></span>
            <span class="group-chat-user-count" id="sortByJoinedTotal">加入人數<i class="fa fa-chevron-up ms-2"></i><i
                    class="fa fa-chevron-down ms-2"></i></span>
            <span class="group-chat-created-at" id="sortByInitDate">開聊日期<i class="fa fa-chevron-up ms-2"></i><i
                    class="fa fa-chevron-down ms-2"></i></span>
            <span class="group-chat-action">動作</span>
        </div>
        <div class="table-body" id="roomsPanel" data-loginuserid="{{loginUser.id}}">
            {{#each groupChats}}
            <div class="room-items" data-groupchatid="{{this.id}}" data-inituseraccount="{{this.user.account}}"
                data-roomtitle="{{this.name}}" data-online-total="0" data-total="{{this.numOfRegisters}}"
                data-createdate="{{#dateFormator}}{{../this.createdAt}}{{/dateFormator}}">
                <span class="group-chat-name">{{this.name}}</span>
                <span class="group-chat-user-account">{{this.user.account}}</span>
                <span class="group-chat-online-user-count" data-info="group-chat-online-user-count"></span>
                <span class="group-chat-user-count">{{this.numOfRegisters}}</span>
                <span class="group-chat-created-at">{{#dateFormator}}{{../this.createdAt}}{{/dateFormator}}</span>
                <span class="action group-chat-action">
                    {{#if this.isRegistered}}
                    <button type="button" class="btn btn-success dropdown-toggle out-room" data-bs-toggle="dropdown"
                        aria-expanded="false">
                        已加入
                    </button>
                    <a href="/users/loginUser/groupChats/groupMessages?groupId={{this.id}}"
                        class="btn btn-info go-chat ms-2">Chat</a>
                    <ul class="dropdown-menu">
                        <li>
                            <form action="/groupChats/{{this.id}}/groupRegisters?_method=DELETE" method="POST"
                                style="display: inline;">
                                <button class="ms-2" type="submit">退出話題</button>
                            </form>
                        </li>
                    </ul>
                    {{else}}
                    <form action="/groupChats/{{this.id}}/groupRegisters" method="POST" style="display: inline;">
                        <button type="submit" class="btn btn-primary join-room">+加入話題</button>
                    </form>
                    {{/if}}
                </span>
            </div>
            {{/each}}
        </div>
    </div>
</div>
<div style="display:none;" data-firebase-token="{{token}}"></div>

<script>
    const filterCondInput = document.querySelector('#filterCond'),
        keywordInput = document.querySelector('#keyword'),
        roomsPanel = document.querySelector('#roomsPanel'),
        tableHead = document.querySelector('.table-head'),
        allRooms = document.querySelectorAll(`div[data-roomtitle]`),
        originRawHtml = roomsPanel.innerHTML
        tokenContainer = document.querySelector('[data-firebase-token]')

    let i, switching, roomOptions, shouldSwitch

    if (tokenContainer.dataset.firebaseToken) {
        // 登入firebase
        firebase.auth().signInWithCustomToken(tokenContainer.dataset.firebaseToken)
            .then((userCredential) => {
                // Signed in
                // const user = userCredential.user;
                console.log('successfully login firebase!')
            })
            .catch((error) => {
                // const errorCode = error.code;
                const errorMessage = error.message;
                alert(`有地方出錯了！請截圖彈跳視窗給開發人員，我們會盡快排除故障: fail to login firebase, errorMessage: ${errorMessage}`)
                document.location.href = "/groupChats"
            })
    }

    // socket事件
    socket.emit("fetchOnlineUsers")

    socket.on('getOnlineUsers', (onlineUsers) => {
        const onlineGroupUserCountBoxes = document.querySelectorAll('[data-info="group-chat-online-user-count"]')

        onlineGroupUserCountBoxes.forEach(box => {
            const groupChatId = Number(box.parentElement.dataset.groupchatid)
            let userCount = 0
            onlineUsers.forEach(user => {
                if (user.groupChatIds.includes(groupChatId)) userCount += 1
            })
            box.innerText = userCount
            box.parentElement.dataset.onlineTotal = userCount
        })
    })

    // 排序聊天室功能
    tableHead.addEventListener('click', e => {
        // 依聊天室上線人數多寡排序
        if (e.target.classList.contains('fa-chevron-up') && e.target.parentElement.id === 'sortByOnline') {
            switching = true
            while (switching) {
                switching = false
                roomOptions = document.querySelectorAll('div[data-roomtitle]')
                for (i = 0; i < (roomOptions.length - 1); i++) {
                    shouldSwitch = false
                    if (Number(roomOptions[i].dataset.onlineTotal) > Number(roomOptions[i + 1].dataset.onlineTotal)) {
                        shouldSwitch = true
                        break
                    }
                }
                if (shouldSwitch) {
                    roomOptions[i].parentElement.insertBefore(roomOptions[i + 1], roomOptions[i])
                    switching = true
                }
            }
        } else if (e.target.classList.contains('fa-chevron-down') && e.target.parentElement.id === 'sortByOnline') {
            switching = true
            while (switching) {
                switching = false
                roomOptions = document.querySelectorAll('div[data-roomtitle]')
                for (i = 0; i < (roomOptions.length - 1); i++) {
                    shouldSwitch = false
                    if (Number(roomOptions[i].dataset.onlineTotal) < Number(roomOptions[i + 1].dataset.onlineTotal)) {
                        shouldSwitch = true
                        break
                    }
                }
                if (shouldSwitch) {
                    roomOptions[i].parentElement.insertBefore(roomOptions[i + 1], roomOptions[i])
                    switching = true
                }
            }
            // 依聊天室加入人數多寡排序
        } else if (e.target.classList.contains('fa-chevron-up') && e.target.parentElement.id === 'sortByJoinedTotal') {
            switching = true
            while (switching) {
                switching = false
                roomOptions = document.querySelectorAll('div[data-roomtitle]')
                for (i = 0; i < (roomOptions.length - 1); i++) {
                    shouldSwitch = false
                    if (Number(roomOptions[i].dataset.total) > Number(roomOptions[i + 1].dataset.total)) {
                        shouldSwitch = true
                        break
                    }
                }
                if (shouldSwitch) {
                    roomOptions[i].parentElement.insertBefore(roomOptions[i + 1], roomOptions[i])
                    switching = true
                }
            }
        } else if (e.target.classList.contains('fa-chevron-down') && e.target.parentElement.id === 'sortByJoinedTotal') {
            switching = true
            while (switching) {
                switching = false
                roomOptions = document.querySelectorAll('div[data-roomtitle]')
                for (i = 0; i < (roomOptions.length - 1); i++) {
                    shouldSwitch = false
                    if (Number(roomOptions[i].dataset.total) < Number(roomOptions[i + 1].dataset.total)) {
                        shouldSwitch = true
                        break
                    }
                }
                if (shouldSwitch) {
                    roomOptions[i].parentElement.insertBefore(roomOptions[i + 1], roomOptions[i])
                    switching = true
                }
            }
            // 依聊天室創建日期排序
        } else if (e.target.classList.contains('fa-chevron-up') && e.target.parentElement.id === 'sortByInitDate') {
            switching = true
            while (switching) {
                switching = false
                roomOptions = document.querySelectorAll('div[data-roomtitle]')
                for (i = 0; i < (roomOptions.length - 1); i++) {
                    shouldSwitch = false
                    if (processDate(roomOptions[i].dataset.createdate) > processDate(roomOptions[i + 1].dataset.createdate)) {
                        shouldSwitch = true
                        break
                    }
                }
                if (shouldSwitch) {
                    roomOptions[i].parentElement.insertBefore(roomOptions[i + 1], roomOptions[i])
                    switching = true
                }
            }
        } else if (e.target.classList.contains('fa-chevron-down') && e.target.parentElement.id === 'sortByInitDate') {
            switching = true
            while (switching) {
                switching = false
                roomOptions = document.querySelectorAll('div[data-roomtitle]')
                for (i = 0; i < (roomOptions.length - 1); i++) {
                    shouldSwitch = false
                    if (processDate(roomOptions[i].dataset.createdate) < processDate(roomOptions[i + 1].dataset.createdate)) {
                        shouldSwitch = true
                        break
                    }
                }
                if (shouldSwitch) {
                    roomOptions[i].parentElement.insertBefore(roomOptions[i + 1], roomOptions[i])
                    switching = true
                }
            }
        }
    })

    // 依話題主ID or 話題名稱 切換 輸入關鍵字條件
    filterCondInput.addEventListener('change', e => {
        const value = e.target.value
        keywordInput.value = ''
        if (value === 'initiator_id') {
            keywordInput.setAttribute('placeholder', '請輸入話題主ID')
        } else if (value === 'room_title') {
            keywordInput.setAttribute('placeholder', '請輸入話題名稱')
        }
    })

    // 搜尋聊天室功能
    keywordInput.addEventListener('keyup', e => {
        const keywordValue = e.target.value.toLowerCase()
        let rawHtml = ''

        if (filterCondInput.value === 'room_title') {
            allRooms.forEach(item => {
                if (item.dataset.roomtitle.trim().toLowerCase().includes(keywordValue)) {
                    rawHtml += `
                        <div class="room-items" data-groupchatid="${item.dataset.groupchatid}" data-inituseraccount="${item.dataset.inituseraccount}"
                        data-roomtitle="${item.dataset.roomtitle}" data-total="${item.dataset.total}" data-createdate="${item.dataset.createdate}">
                            ${item.innerHTML}
                        </div>
                    `
                }
            })
        } else if (filterCondInput.value === 'initiator_id') {
            allRooms.forEach(item => {
                if (item.dataset.inituseraccount.trim().toLowerCase().includes(keywordValue)) {
                    rawHtml += `
                        <div class="room-items" data-groupchatid="${item.dataset.groupchatid}" data-inituseraccount="${item.dataset.inituseraccount}"
                        data-roomtitle="${item.dataset.roomtitle}" data-total="${item.dataset.total}" data-createdate="${item.dataset.createdate}">
                            ${item.innerHTML}
                        </div>
                    `
                }
            })
        }
        roomsPanel.innerHTML = rawHtml
    })

    // 依日期排序日期時 , 整理日期使日期能比較大小而排序
    function processDate(str) {
        const strToArr = str.split('')
        let years, finalDate
        for (let i = 0; i < strToArr.length; i++) {
            if (strToArr[i] === '/') {
                strToArr.splice(i, 1)
            }
        }
        years = strToArr.splice(-4, strToArr.length)
        finalDate = Number(years.concat(strToArr).join(''))
        return finalDate
    }


</script>