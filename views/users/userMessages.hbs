<div class="chat-wrapper">
    {{>sideNav path=path}}
    <div class="chat-room bg-light">
        <div class="search-box text-center mt-1 mb-1">
            <input type="text" name="searchRoom" id="searchRoom" data-info="search-chat" placeholder="輸入話題名稱或使用者ID">
            <i class="fa fa-search"></i>
        </div>
        <div class="room-box d-flex flex-column align-items-center" id="chatList">
            {{#if chats}}
            {{#each chats}}
            <div class="room-item {{#ifCond this.id ../unfoldedChat.id}}{{#ifCond ../this.chatType ../../unfoldedChat.chatType}}active{{/ifCond}}{{/ifCond}} btn"
                data-chat-room="{{this.chatType}}{{this.id}}" data-chat-id="{{this.id}}"
                data-chat-type="{{this.chatType}}" {{#ifCond this.chatType 'groupChat' }}
                data-url="/api/users/loginUser/groupChats/groupMessages?groupId={{../this.id}}" {{/ifCond}} {{#ifCond
                this.chatType 'privateChat' }} data-url="/api/users/loginUser/privateMessages?userId={{../this.id}}"
                {{/ifCond}}>
                <div class="online" {{#ifCond this.chatType 'groupChat' }}style="display:none;" {{/ifCond}}></div>
                {{#if this.avatar}}
                <img src="{{this.avatar}}" alt="room-avatar" class="chat-avatar">
                {{else}}
                <img src="/image/users.webp" alt="room-avatar" class="chat-avatar">
                {{/if}}
                <div class="chat-nameAndNew">
                    <span class="name fs-14-bold" data-info="chat-name">{{this.name}}</span>
                    {{#if this.latestMessage }}
                    <span class="new fs-12">
                        {{#if this.latestMessage.isLoginUser}}你{{else}}{{this.latestMessage.User.account}}{{/if}}:
                        {{#if this.latestMessage.content}}
                        {{this.latestMessage.content}}
                        {{else}}
                        {{#if this.latestMessage.imageSrc}}
                        傳送一張圖片
                        {{else}}
                        {{#if this.latestMessage.file}}
                        {{#getFileNameFromUrl}}傳送一個附件{{/getFileNameFromUrl}}
                        {{/if}}
                        {{/if}}
                        {{/if}}
                    </span>
                    {{else}}
                    <span class="new fs-12">目前沒有任何訊息!</span>
                    {{/if}}
                </div>
                <div class="chat-timeAndRead">

                    <span class="time fs-12">{{#if this.latestMessage
                        }}{{this.latestMessage.formattedCreatedAt}}{{/if}}</span>
                    <div class=""></div>

                </div>
            </div>
            {{/each}}
            {{else}}
            <div class="mt-4">
                目前沒有進行中的聊天!
            </div>
            {{/if}}
        </div>
    </div>
    <div class="chatting">
        {{#if chats}}
        <div class="top-section d-flex flex-row justify-content-between" id="chat-details">
            <div class="left-part {{#ifCond unfoldedChat.chatType 'privateChat'}}full-width{{/ifCond}}" data-info= "unfoldedChatBox">
                <div class="left-part-top bg-light" id="room-info-wrapper">
                    <div class="room-info d-flex flex-row align-items-center">
                        {{#if unfoldedChat.photo}}
                        <img src="{{unfoldedChat.photo}}" alt="" class="avatar">
                        {{else}}
                        <img src="/image/users.webp" alt="" class="avatar">
                        {{/if}}
                        <div class="nameAndTime-box d-flex flex-column align-items-start">
                            <span class="room-name fs-14-bold">{{unfoldedChat.name}}</span>
                            {{#ifCond unfoldedChat.chatType 'groupChat'}}
                            <span class="room-createBy fs-12">Group chat initialized by
                                {{../unfoldedChat.User.account}}</span>
                            {{/ifCond}}
                        </div>
                    </div>
                    {{#ifCond unfoldedChat.chatType 'groupChat'}}
                    <form action="/groupChats/{{../unfoldedChat.id}}/groupRegisters?_method=DELETE" method="POST"
                        class="out-room">
                        <button class="btn btn-danger" type="submit">退出話題</button>
                    </form>
                    {{/ifCond}}
                    {{#ifCond unfoldedChat.chatType 'privateChat'}}
                    <form action="/users/{{../unfoldedChat.id}}/friendships?_method=DELETE" method="POST"
                        class="out-room">
                        <button class="btn btn-danger" type="submit">解除朋友關係</button>
                    </form>
                    {{/ifCond}}
                </div>
                <div class="left-part-bottom bg-light" id="msg-displayer">
                    {{#if unfoldedChat.Group_messages}}
                    {{#each unfoldedChat.Group_messages}}
                    {{>chatMessage}}
                    {{/each}}
                    {{else}}
                    {{#if unfoldedChat.Private_messages}}
                    {{#each unfoldedChat.Private_messages}}
                    {{>chatMessage}}
                    {{/each}}
                    {{else}}
                    <span class="new fs-12" id="no-message-text">目前沒有任何訊息!</span>
                    {{/if}}
                    {{/if}}
                </div>
            </div>
            <div class="right-part bg-light" {{#ifCond unfoldedChat.chatType 'privateChat' }}style="display:none;"
                {{/ifCond}} data-info="online-and-offline-group-users">
                <div class="right-part-top" id="online-user-box">
                    <div class="online-box d-flex flex-row">
                        <span class="fs-14-bold">上線</span>
                        <span class="online-icon"></span>
                    </div>
                    {{#ifCond unfoldedChat.chatType 'groupChat'}}
                    {{!-- 上線使用者清單，預設為所有加入groupChat的使用者，由socket事件控制減少項目 --}}
                    {{#each ../unfoldedChat.RegisteredUsers}}
                    <div class="online-user" data-user-id="{{this.id}}">
                        <img src="/image/users.webp" alt="user-avatar" class="user-avatar">
                        <span class="user-account fs-12 fw-bold">{{this.account}}</span>
                    </div>
                    {{/each}}
                    {{/ifCond}}
                </div>
                <hr>
                <div class="right-part-bottom" id="offline-user-box">
                    <div class="outline-box d-flex flex-row">
                        <span class="fs-14-bold">離線</span>
                        <span class="outline-icon"></span>
                    </div>
                    {{!-- 離線使用者清單，由socket事件控制增加項目 --}}
                </div>
            </div>
        </div>
        <form class="bottom-section send-message-wrapper bg-light" enctype='multipart/form-data' {{#ifCond
            unfoldedChat.chatType 'groupChat' }}
            data-post-url="/api/users/loginUser/groupChats/{{../unfoldedChat.id}}/groupMessages" {{/ifCond}} {{#ifCond
            unfoldedChat.chatType 'privateChat' }}
            data-post-url="/api/users/loginUser/privateMessages/recievers/{{../unfoldedChat.id}}" {{/ifCond}}
            data-login-user-id="{{user.id}}">
            <div class="if-file-box d-flex flex-row justify-content-start align-items-center">
                <div class="file-item" style="display:none;" id="file-item">
                    <i class="fa fa-times remove-btn"></i>
                    <span>Insert text by DOM</span>
                </div>
                <div class="image-item" style="display:none;" id="image-item">
                    <i class="fa fa-times remove-btn"></i>
                    <img src="" id="image-preview">
                </div>
            </div>
            <div class="send-message-box d-flex flex-row justify-content-between align-items-center">
                <div class="send-file-icon-box d-flex flex-row justify-content-around align-items-center">
                    <div class="icon-box-paperClip">
                        <label for="file">
                            <i class="fa fa-paperclip"></i>
                        </label>
                        <input type="file" name="file" id="file" style="display:none;">
                    </div>
                    <div class="icon-box-camera">
                        <label for="image">
                            <i class="fa fa-camera"></i>
                        </label>
                        <input type="file" name="image" id="image" style="display:none;" accept="image/*">
                    </div>
                </div>
                <div class="send-message">
                    <textarea name="content" id="text-message" class="message"></textarea>
                    <button type="submit" class="btn btn-outline-primary" id="submitBtn">送出</button>
                </div>
            </div>
        </form>
        {{else}}
        <div class="no-available-chat-message">
            <img src="https://cdn-icons-png.flaticon.com/512/95/95458.png" alt="">
            <h3>沒有可以查看的訊息</h3>
        </div>
        {{/if}}
    </div>
</div>
<script>
    const msgDisplayer = document.querySelector('#msg-displayer')
    const sendMsgWrapper = document.querySelector('.send-message-wrapper')
    const searchChatInput = document.querySelector('[data-info="search-chat"]')
    const chats = document.querySelectorAll('.room-item')
    const privateChats = document.querySelectorAll('.room-item[data-chat-type="privateChat"]')
    const activeGroupChat = document.querySelector('.room-item.active[data-chat-type="groupChat"]') || null

    if (privateChats.length) socket.emit("fetchOnlineUserIds")
    if (activeGroupChat) 
    {   console.log('emitfetchOnlineGroupUserIds')
        socket.emit("fetchOnlineGroupUserIds", Number(activeGroupChat.dataset.chatId)) }


    // 將卷軸置底
    if (msgDisplayer) msgDisplayer.scrollTop = msgDisplayer.scrollHeight

    // 以下至文件結尾分成兩個Sections: 1. 事件監聽器 2. 函式定義
    // Section 1. 事件監聽器
    // 1.1 socket事件
    // 1.2 元素點擊或送出事件

    // Section 1.1 socket事件
    // 監聽來自伺服器的chatMessage事件，事件發生則在對話框&左側顯示訊息
    socket.on("chatMessage", (chatRoom, Sender, content, createdAt, file, imageSrc) => {
        const loginUserId = Number(sendMsgWrapper.dataset.loginUserId)

        // 在對話框加入訊息
        addMsgToMsgDisplayer(chatRoom, Sender, content, createdAt, file, imageSrc, loginUserId)
        // 在左列指定的chat item加入訊息
        addMsgToChatList(chatRoom, Sender, content, createdAt, file, imageSrc, loginUserId)
    })
    // 監聽來自伺服器的「上線使用者名單」事件，事件發生則正確顯示左側privatChat使用者上線狀態
    socket.on('getOnlineUserIds', (onlineUserIds) => {
        privateChats.forEach(chatItem => {
            if (onlineUserIds.includes(Number(chatItem.dataset.chatId))) return
            chatItem.querySelector('.online').classList.add('gray')
        })
    })
    // 監聽來自伺服器的「上線Group User名單」事件，事件發生則在group message右側正確顯示線上/離線使用者清單
    socket.on('getOnlineGroupUserIds', (onlineGroupUserIds) => {
        console.log('onlineGroupUserIds',onlineGroupUserIds)
        classifyOnlineAndOfflineGroupUsers(onlineGroupUserIds)
    })
    // 監聽來自伺服器的「登入」事件，事件發生則更新左側privatChat使用者上線狀態，與group message的上線使用者清單
    socket.on('newLogin', (userGroupChatIds, userId) => {
        const userPrivateChat = document.querySelector(`.room-item[data-chat-room="privateChat${userId}"]`)
        const activeGroupChatId = document.querySelector('.room-item.active[data-chat-type="groupChat"]')?.dataset.chatId || null
    
        if (userPrivateChat) { userPrivateChat.querySelector('.online').classList.remove('gray') }
        if (activeGroupChatId && userGroupChatIds.includes(Number(activeGroupChatId))) {
            // 更新所展開的groupMessage的登入使用者名單
            const offlineRoomates = document.querySelectorAll('.right-part-bottom .online-user')
            offlineRoomates.forEach(r => {
                if (Number(r.dataset.userId) !== userId) return
                const onlineUserBox = document.querySelector('#online-user-box')
                onlineUserBox.appendChild(r)
            })
        }
    })
    // 監聽來自伺服器的「登出」事件，事件發生則更新左側privatChat使用者上線狀態，與group message的上線使用者清單
    socket.on('newLogout', (userGroupChatIds, userId) => {
        const userPrivateChat = document.querySelector(`.room-item[data-chat-room="privateChat${userId}"]`)
        const activeGroupChatId = document.querySelector('.room-item.active[data-chat-type="groupChat"]')?.dataset.chatId || null

        if (userPrivateChat) { userPrivateChat.querySelector('.online').classList.add('gray') }
        if (activeGroupChatId && userGroupChatIds.includes(Number(activeGroupChatId))) {
            const onlineRoomates = document.querySelectorAll('.online-user')
            onlineRoomates.forEach(r => {
                if (Number(r.dataset.userId) !== userId) return
                const offlineUserBox = document.querySelector('#offline-user-box')
                offlineUserBox.appendChild(r)
            })
        }
    })

    // Section 1.2 元素點擊或送出事件
    // 左側chats清單監聽點擊事件，事件發生則顯示目標聊天項目的所有訊息和線上/離線使用者清單
    chats.forEach(c => {
        c.addEventListener('click', (e) => {
            const roomItem = e.currentTarget
            if (roomItem.classList.contains('active')) return

            const chatRoom = roomItem.dataset.chatRoom
            const URL = roomItem.dataset.url
            roomItem.disabled = true

            updateChatActiveStatus(chatRoom)
            axios.get(URL)
                .then((response) => {
                    if (response.data.status === 'success') {
                        buildChatDetails(response.data)
                    }
                    roomItem.disabled = false
                })
                .catch((err) => {
                    console.log(err)
                    roomItem.disabled = false
                })
        })
    })
    // 訊息顯示區塊監聽點擊事件，事件發生則下載目標檔案
    if (msgDisplayer) {
        msgDisplayer.addEventListener('click', function onMessageClicked(e) {
            if (e.target.matches('.download-item') || e.target.parentNode.matches('.download-item')) {
                downloadFile(e.target.dataset.url)
            }
        })
    }
    // 編輯訊息區監聽change事件，事件發生則啟動檔案預覽
    if (sendMsgWrapper) {
        sendMsgWrapper.addEventListener('change', function onFileChanged(e) {
            // 如果event target是text area，則結束處理
            if (!e.target.files) return

            if (e.target.matches('#file')) displayFile(e.target.files[0].name)
            if (e.target.matches('#image')) displayImage(e.target.files[0])
        })
        // 檔案預覽「ｘ」按鈕監聽點擊事件，事件發生則關閉檔案預覽
        sendMsgWrapper.addEventListener('click', function onFileRemovedIconClicked(e) {
            if (!e.target.matches('.remove-btn')) return

            if (e.target.parentNode.matches('#file-item')) {
                const fileItem = e.target.parentNode
                const fileInput = document.querySelector('#file')

                // 隱藏檔案名稱標籤
                fileItem.style.display = "none"
                // 清空檔案input
                fileInput.value = ''
            }

            if (e.target.parentNode.matches('#image-item')) {
                const imageItem = e.target.parentNode
                const imageInput = document.querySelector('#image')

                // 隱藏image preview
                imageItem.style.display = "none"
                // 清空image input
                imageInput.value = ''
                // 恢復畫面高度至原來設定
                setHeightsToOriginalSettings()
            }
        })
        // 訊息表單監聽送出事件，事件發生則處理檔案上傳、發送表單至後端，並發送socket事件
        sendMsgWrapper.addEventListener('submit', async function onMessageSubmitted(e) {
            const textInput = document.querySelector('#text-message')
            const fileInput = document.querySelector('#file')
            const imageInput = document.querySelector('#image')
            const submitBtn = document.querySelector('#submitBtn')
            const postURL = sendMsgWrapper.dataset.postUrl
            const formData = new FormData(sendMsgWrapper)

            e.preventDefault()

            // 如果沒有輸入任何訊息、也沒有選擇檔案，則結束處理
            if (!textInput.value.trim() && !fileInput.files.length && !imageInput.files.length) return

            // disable送出按紐
            submitBtn.disabled = true
            submitBtn.innerText = '發送中'

            // 將檔案上傳至firebase，並在formData加上檔案連結
            if (fileInput.files[0]) formData.append('fileUrl', await uploadAndgetFirebaseRef('files', fileInput.files[0]))
            if (imageInput.files[0]) {
                const imageUrl = await uploadAndgetFirebaseRef('images', imageInput.files[0])
                const imageSrc = await getImageDownloadUrl(imageUrl)
                formData.append('imageUrl', imageUrl)
                formData.append('imageSrc', imageSrc.toString())
            }

            axios
                .post(postURL, formData, { headers: { 'Content-Type': 'multipart/form-data' } })
                .then((response) => {
                    if (response.data.status === 'error') throw new Error(response.data.message)
                    const activeChat = document.querySelector('.room-item.active')
                    const chatType = activeChat.dataset.chatType
                    const { User, content, formattedCreatedAt, file, imageSrc } = response.data.message
                    const fileItem = document.querySelector('#file-item')
                    const imageItem = document.querySelector('#image-item')

                    // 發送chatMessage事件給伺服器
                    if (chatType === 'groupChat') {
                        const chatRoom = activeChat.dataset.chatRoom
                        socket.emit("groupChatMessage", chatRoom, User, content, formattedCreatedAt, file, imageSrc)
                    }
                    if (chatType === 'privateChat') {
                        const recieverId = Number(activeChat.dataset.chatId)
                        socket.emit("privateChatMessage", recieverId, User, content, formattedCreatedAt, file, imageSrc)
                    }

                    // 清空input的值
                    textInput.value = ''
                    fileInput.value = ''
                    imageInput.value = ''
                    // 隱藏檔案預覽、圖片預覽
                    fileItem.style.display = "none"
                    imageItem.style.display = "none"
                    // 恢復畫面高度至原來設定
                    setHeightsToOriginalSettings()
                    // 恢復送出按紐功能
                    submitBtn.disabled = false
                    submitBtn.innerText = '送出'
                })
                .catch((err) => {
                    alert(`有地方出錯了！請截圖彈跳視窗給開發人員，我們會盡快排除故障${err}`)
                })
        })

    }
    searchChatInput.addEventListener('keyup', function onInputChanged(e) {
        const inputValue = e.target.value.trim().toLowerCase()
        const re = new RegExp(`${inputValue}`, 'i')
         chats.forEach(chat => {
             const chatNameBox = chat.querySelector('[data-info="chat-name"]')
              if (re.test(chatNameBox.innerText)) return chat.style.display = ''
              chat.style.display = 'none'
         })
       
    })

    // Section 2. 函式定義
    // 2.1 畫面組裝
    // 2.2 製作前端樣板
    // 2.3 檔案上傳/下載

    // Section 2.1 畫面組裝
    function addMsgToMsgDisplayer(chatRoom, Sender, content, createdAt, file, imageSrc, loginUserId) {
        const msgDisplayer = document.querySelector('#msg-displayer')
        const noMessageText = document.querySelector('#no-message-text')
        const activeChat = document.querySelector('.room-item.active')
        let newMessageDiv

        if (activeChat.dataset.chatRoom !== chatRoom) return

        if (noMessageText) noMessageText.parentNode.removeChild(noMessageText)

        if (Sender.id === loginUserId) {
            // 製作自己發送的訊息節點
            newMessageDiv = buildMessageFromUser(content, createdAt, file, imageSrc)
        } else {
            // 製作他人發送的訊息節點
            newMessageDiv = buildMessageFromOther(content, createdAt, file, imageSrc, Sender)
        }
        // 在對話框加入訊息
        msgDisplayer.appendChild(newMessageDiv)
        // 下滑scrollbar到底
        msgDisplayer.scrollTop = msgDisplayer.scrollHeight
    }
    function addMsgToChatList(chatRoom, Sender, content, createdAt, file, imageSrc, loginUserId) {
        const targetChatItem = document.querySelector(`.room-item[data-chat-room=${chatRoom}]`)
        if (!targetChatItem) return

        const chatNameAndNew = targetChatItem.children[2]
        const chatTimeAndRead = targetChatItem.children[3]
        const isLoginUser = Sender.id === loginUserId
        const senderAlias = isLoginUser ? '你' : Sender.account
        const messageCut = makeMessageCut(content, file, imageSrc)

        // 在左列指定的chat item加入最新訊息
        chatNameAndNew.children[1].innerText = `${senderAlias}: ${messageCut}`
        // 顯示訊息時間
        chatTimeAndRead.children[0].innerText = createdAt

        function makeMessageCut(content, file, imageSrc) {
            if (content) return content.substring(0, 14) + '...'
            if (imageSrc) return '傳送一張圖片'
            if (file) return '傳送一個附件'
        }
    }
    function updateChatActiveStatus(chatRoom) {
        const roomItems = document.querySelectorAll('.room-item')
        roomItems.forEach(r => {
            if (r.classList.contains('active')) r.classList.remove('active')
            if (r.dataset.chatRoom === chatRoom) r.classList.add('active')
        })
    }
    function buildChatDetails(data) {
        if (data.unfoldedChat) {
            const roomInfoWrapper = document.querySelector('#room-info-wrapper')
            const msgDisplayer = document.querySelector('#msg-displayer')
            const onlineAndOfflineGroupUsersBox = document.querySelector('[data-info="online-and-offline-group-users"]')
            const unfoldedChatBox = document.querySelector('[data-info= "unfoldedChatBox"]')
            if (data.unfoldedChat.chatType === 'groupChat') {
                // 更新訊息表單資訊
                updateGroupMessageFormInfo(data.unfoldedChat.id)
                // 更新標題
                roomInfoWrapper.innerHTML = buildGroupMessagesHeader(data.unfoldedChat.id, data.unfoldedChat.name, data.unfoldedChat.User.account)
                // 更新畫面訊息
                msgDisplayer.innerHTML = assembleMessags(data.unfoldedChat.Group_messages)
                msgDisplayer.scrollTop = msgDisplayer.scrollHeight
                // 整理右側登入使用者名單
                cleanOnlineAndOfflineGroupUserBox()
                appendUsersToOnlineGroupUserBox(data.unfoldedChat.RegisteredUsers)
                socket.emit("fetchOnlineGroupUserIds", data.unfoldedChat.id)

                // 顯示右側登入使用者名單
                onlineAndOfflineGroupUsersBox.style.display = ""
                unfoldedChatBox.classList.remove('full-width')
            }

            if (data.unfoldedChat.chatType === 'privateChat') {
                // 更新訊息表單資訊
                updatePrivateMessageFormInfo(data.unfoldedChat.id)
                // 更新標題
                roomInfoWrapper.innerHTML = buildPrivateMessagesHeader(data.unfoldedChat.id, data.unfoldedChat.name, data.unfoldedChat.photo)
                // 更新畫面訊息
                msgDisplayer.innerHTML = assembleMessags(data.unfoldedChat.Private_messages)
                msgDisplayer.scrollTop = msgDisplayer.scrollHeight
                // 隱藏右側登入使用者名單
                onlineAndOfflineGroupUsersBox.style.display = "none"
                unfoldedChatBox.classList.add('full-width')
            }
        }
    }
    function assembleMessags(messages) {
        const tempDiv = document.createElement('div')

        if (messages === null || !messages.length) {
            tempDiv.innerHTML = '<span class="new fs-12" id="no-message-text">目前沒有任何訊息!</span>'
        } else {
            messages.forEach(m => {
                if (m.isLoginUser) {
                    tempDiv.appendChild(buildMessageFromUser(m.content, m.formattedCreatedAt, m.file, m.imageSrc))
                }
                else {
                    tempDiv.appendChild(buildMessageFromOther(m.content, m.formattedCreatedAt, m.file, m.imageSrc, m.User))
                }
            })
        }

        return tempDiv.innerHTML
    }
    function cleanOnlineAndOfflineGroupUserBox() {
        const previousRoomUsers = document.querySelectorAll('.online-user')
        if (!previousRoomUsers.length) return
        previousRoomUsers.forEach(u => u.parentNode.removeChild(u))
    }
    function appendUsersToOnlineGroupUserBox(users) {
        users.forEach(u => {
            const onlineUserBox = document.querySelector('#online-user-box')
            const userItem = document.createElement('div')

            userItem.classList.add('online-user')
            userItem.dataset.userId = u.id
            userItem.innerHTML = `
                <img src="/image/users.webp" alt="user-avatar" class="user-avatar">
                <span class="user-account fs-12 fw-bold">${u.account}</span>
            `
            onlineUserBox.appendChild(userItem)
        })
    }
    function updateGroupMessageFormInfo(groupId) {
        const sendMessageWrapper = document.querySelector('.send-message-wrapper')
        sendMessageWrapper.dataset.postUrl = `/api/users/loginUser/groupChats/${groupId}/groupMessages`
    }
    function updatePrivateMessageFormInfo(recieverId) {
        const sendMessageWrapper = document.querySelector('.send-message-wrapper')
        sendMessageWrapper.dataset.postUrl = `/api/users/loginUser/privateMessages/recievers/${recieverId}`
    }
    function classifyOnlineAndOfflineGroupUsers(onlineGroupUserIds) {
        // 在所展開的groupMessage右側顯示登入使用者清單
        const defaultOnlineGroupUsers = document.querySelectorAll('.online-user')
        defaultOnlineGroupUsers.forEach(r => {
            if (!onlineGroupUserIds.includes(Number(r.dataset.userId))) {
                const offlineUserBox = document.querySelector('#offline-user-box')
                offlineUserBox.appendChild(r)
            }
        })
    }
    function displayFile(name) {
        const fileItem = document.querySelector('#file-item')
        const textContainer = fileItem.children[1]

        textContainer.innerText = name
        fileItem.style.display = ""
    }
    function displayImage(selectedImage) {
        const imageItem = document.querySelector('#image-item')
        const imagePreview = document.querySelector('#image-preview')
        const url = URL.createObjectURL(selectedImage)

        adjustHeightsToWrapImagePreview()

        imagePreview.src = url
        imageItem.style.display = ""
    }
    function adjustHeightsToWrapImagePreview() {
        const chatDetails = document.querySelector('.chatting .top-section')
        const sendMessageWrapper = document.querySelector('.send-message-wrapper')
        const fileBox = document.querySelector('.bottom-section .if-file-box')
        const sendMessageBox = document.querySelector('.bottom-section .send-message-box')

        chatDetails.style.height = "68%"
        sendMessageWrapper.style.height = "32%"
        fileBox.style.height = "65%"
        sendMessageBox.style.height = "35%"
    }
    function setHeightsToOriginalSettings() {
        const chatDetails = document.querySelector('.chatting .top-section')
        const sendMessageWrapper = document.querySelector('.send-message-wrapper')
        const fileBox = document.querySelector('.bottom-section .if-file-box')
        const sendMessageBox = document.querySelector('.bottom-section .send-message-box')

        chatDetails.style.height = "84%"
        sendMessageWrapper.style.height = "16%"
        fileBox.style.height = "30%"
        sendMessageBox.style.height = "70%"
    }
    // Section 2.2 製作前端樣板
    function buildGroupMessagesHeader(id, name, userAccount) {
        return newTemplate = `
            <div class="room-info d-flex flex-row align-items-center">
                <img src="/image/users.webp" alt="" class="avatar">
                <div class="nameAndTime-box d-flex flex-column align-items-start">
                    <span class="room-name fs-14-bold">${name}</span>
                    <span class="room-createBy fs-12">Group chat initialized by ${userAccount}</span>
                </div>
            </div>
            <form action="/groupChats/${id}/groupRegisters?_method=DELETE" method="POST" class="out-room">
                <button class="btn btn-danger" type="submit">退出話題</button>
            </form>
        `
    }
    function buildPrivateMessagesHeader(id, name, photo) {
        let imgSrc = photo ? photo : '/image/users.webp'
        return newTemplate = `
            <div class="room-info d-flex flex-row align-items-center">
                <img src="${imgSrc}" alt="" class="avatar">
                <div class="nameAndTime-box d-flex flex-column align-items-start">
                    <span class="room-name fs-14-bold">${name}</span>
                </div>
            </div>
            <form action="/users/${id}/friendships?_method=DELETE" method="POST"
                        class="out-room">
                        <button class="btn btn-danger" type="submit">解除朋友關係</button>
                    </form>
        `
    }
    function buildMessageFromUser(content, createdAt, file, imageSrc) {
        const messageContainer = document.createElement('div')
        messageContainer.classList.add('d-flex', 'flex-row-reverse')
        messageContainer.innerHTML = `
                        <div class="d-flex flex-column align-items-start">
                            <div class="m-2 p-2"style="background: rgb(16, 16, 253); color: #fff; border-radius: 6px;">
                                <div>
                                    <div class="new fs-12"></div>
                                    <div class="time fs-12 text-end">${createdAt}</div>
                                </div>
                            </div>
                        </div>
                    `

        const messageWrapper = messageContainer.children[0].children[0].children[0]
        const timeContainer = messageWrapper.children[1]
        if (content) {
            const contentContainer = messageWrapper.children[0]
            contentContainer.innerText = content
        }
        if (imageSrc) {
            messageWrapper.insertBefore(makeImageNode(imageSrc), timeContainer)
        }
        if (file) {
            messageWrapper.insertBefore(makeDownLoadItemNode(file), timeContainer)
        }

        return messageContainer
    }

    function buildMessageFromOther(content, createdAt, file, imageSrc, Sender) {
        const messageContainer = document.createElement('div')
        messageContainer.classList.add('message-by-others', 'm-2')
        messageContainer.innerHTML = `
            <img src="/image/users.webp" class="avatar">
            <div class="d-flex flex-column align-items-start">
                <div class="fs-14-bold">${Sender.account}</div>
                <div class="m-1 p-2" style="background: rgb(235, 235, 235);border-radius: 6px;">
                    <div>
                        <div class="new fs-12"></div>
                        <div class="time fs-12 text-end">${createdAt}</div>
                    </div>
                 </div>
            </div>
        `
        if (Sender.avatar) messageContainer.querySelector('img').src = Sender.avatar
        const messageWrapper = messageContainer.children[1].children[1].children[0]
        const timeContainer = messageWrapper.children[1]
        if (content) {
            const contentContainer = messageWrapper.children[0]
            contentContainer.innerText = content
        }
        if (imageSrc) {

            messageWrapper.insertBefore(makeImageNode(imageSrc), timeContainer)
        }
        if (file) {

            messageWrapper.insertBefore(makeDownLoadItemNode(file), timeContainer)
        }

        return messageContainer
    }
    function makeDownLoadItemNode(file) {
        const downLoadItem = document.createElement('div')
        downLoadItem.classList.add('download-item')
        downLoadItem.innerHTML = `
            <i class="fa fa-download" data-url="${file}"></i>
            <span data-url="${file}">Insert text by DOM</span>
        `
        downLoadItem.dataset.url = file
        downLoadItem.children[1].innerText = getFileNameFromUrl(file)

        return downLoadItem
    }
    function makeImageNode(imageSrc) {
        const imageContainer = document.createElement('img')
        imageContainer.classList.add('image-message-item')
        imageContainer.src = imageSrc

        return imageContainer
    }

    // Section 2.3 檔案上傳/下載
    async function uploadAndgetFirebaseRef(fileType, file) {
        const storage = firebase.storage()
        // Points to the root reference
        const rootRef = storage.ref()
        // Points to 'files'
        const parentRef = rootRef.child(fileType)
        // Contain 'file' in a unique folder to avoid overwrite
        const uniqueCode = uuidv4()
        // Points to 'file'
        const targetRef = parentRef.child(`${uniqueCode}/${file.name}`)
        // upload file to firebase
        try {
            await targetRef.put(file)
            console.log('Uploaded a file!')
            return targetRef.fullPath
        } catch (err) {
            console.log('Failed to upload a file!')
            return null
        }
    }
    function uuidv4() {
        return ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, c =>
            (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16)
        );
    }
    function getFileNameFromUrl(file) {
        const indexes = []
        let index = file.indexOf('/')

        while (index !== -1) {
            indexes.push(index)
            index = file.indexOf('/', index + 1)
        }
        const fileNameIndexStart = indexes[indexes.length - 1] + 1
        const fileName = file.slice(fileNameIndexStart, file.length)
        return fileName
    }
    function downloadFile(fileUrl) {
        const storage = firebase.storage()
        const storageRef = storage.ref()

        storageRef.child(fileUrl).getDownloadURL()
            .then((url) => {
                // `url` is the download URL for 'file'

                // This can be downloaded directly:
                var xhr = new XMLHttpRequest()
                xhr.responseType = 'blob'
                xhr.onload = (event) => {
                    var blob = xhr.response
                };
                xhr.open('GET', url)
                xhr.send()

                window.open(url)
            })
            .catch((error) => {
                console.log(error)
            });
    }
    async function getImageDownloadUrl(imageUrl) {
        try {
            const storage = firebase.storage()
            const storageRef = storage.ref()
            
            return await storageRef.child(imageUrl).getDownloadURL()
        } catch(err) {
            return err
        }
    }
</script>