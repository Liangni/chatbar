<div class="chat-wrapper">
    {{>sideNav path=path}}
    <div class="chat-room bg-light">
        <div class="search-box text-center mt-1 mb-1">
            <input type="text" name="searchRoom" id="searchRoom" placeholder="輸入話題名稱或使用者名稱">
            <i class="fa fa-search"></i>
        </div>
        <div class="room-box d-flex flex-column align-items-center" id="chatList">
            {{#ifCond path 'getUserGroupMessages'}}
            {{#if ../groupChats}}
            {{#each ../groupChats}}
            <div class="room-item {{#ifCond this.id ../../unfoldedGroupChat.id}}active{{/ifCond}} btn"
                data-io-room="groupChat{{this.id}}"
                data-url="/api/users/loginUser/groupChats/groupMessages?groupId={{this.id}}">
                <img src="/image/users.webp" alt="room-avatar" class="chat-avatar">
                <div class="chat-nameAndNew">
                    <span class="name fs-14-bold">{{this.name}}</span>
                    {{#if this.latestMessage }}
                    <span class="new fs-12">{{#if this.latestMessage.isLoginUser
                        }}你{{else}}{{this.latestMessage.User.account}}{{/if}}: {{this.latestMessage.content}}</span>
                    {{else}}
                    <span class="new fs-12">目前沒有任何訊息!</span>
                    {{/if}}
                </div>
                <div class="chat-timeAndRead">
                    {{#if this.latestMessage }}
                    <span class="time fs-12">{{this.latestMessage.formattedCreatedAt}}</span>
                    <div class=""></div>
                    {{/if}}
                </div>
            </div>
            {{/each}}
            {{else}}
            <div class="mt-4">
                你尚未參與任何群組話題!
            </div>
            {{/if}}
            {{/ifCond}}

            {{#ifCond path 'getUserMessages'}}
            {{!-- 假資料1 --}}
            <div class="room-item">
                <img src="/image/users.webp" alt="room-avatar" class="chat-avatar">
                <div class="chat-nameAndNew">
                    <span class="name fs-14-bold">最喜歡的漫威系列</span>
                    <span class="new fs-12">Sin_1201: 期待奇異...</span>
                </div>
                <div class="chat-timeAndRead">
                    <span class="time fs-12">10:33</span>
                    <div class=""></div>
                </div>
            </div>
            {{!-- 假資料2 --}}
            <div class="room-item">
                <div class="online"></div>
                <img src="/image/users.webp" alt="room-avatar" class="chat-avatar">
                <div class="chat-nameAndNew">
                    <span class="name fs-14-bold">penny_111</span>
                    <span class="new fs-12">你: 那家滿好吃的</span>
                </div>
                <div class="chat-timeAndRead">
                    <span class="time fs-12">昨天</span>
                    <div class="unread"></div>
                </div>
            </div>
            {{!-- 假資料3 --}}
            <div class="room-item">
                <div class="online"></div>
                <img src="/image/users.webp" alt="room-avatar" class="chat-avatar">
                <div class="chat-nameAndNew">
                    <span class="name fs-14-bold">huihui11020</span>
                    <span class="new fs-12">晚安</span>
                </div>
                <div class="chat-timeAndRead">
                    <span class="time fs-12">2020/12/20</span>
                    <div class="unread"></div>
                </div>
            </div>
            {{/ifCond}}
        </div>
    </div>
    <div class="chatting">
        <div class="top-section d-flex flex-row justify-content-between" id="chat-details">
            <div class="left-part">
                <div class="left-part-top bg-light" id="room-info-wrapper">
                    <div class="room-info d-flex flex-row align-items-center">
                        <img src="/image/users.webp" alt="" class="avatar">
                        <div class="nameAndTime-box d-flex flex-column align-items-start">
                            <span class="room-name fs-14-bold">{{unfoldedGroupChat.name}}</span>
                            <span class="room-createBy fs-12">Group chat initialized by
                                {{unfoldedGroupChat.User.account}}</span>
                        </div>
                    </div>
                    <form action="" method="POST" class="out-room">
                        <button class="btn btn-danger" type="submit">退出話題</button>
                    </form>
                </div>
                <div class="left-part-bottom bg-light" id="msg-displayer">
                    {{#if unfoldedGroupChat.Group_messages}}
                    {{#each unfoldedGroupChat.Group_messages}}
                    {{#if this.isLoginUser}}
                    <div class="d-flex flex-row-reverse">
                        <div class="d-flex flex-column align-items-start">
                            <div class="m-2 p-2" style="background: rgb(16, 16, 253); color: #fff; border-radius: 6px;">
                                <div>
                                    <div class="new fs-12">{{this.content}}</div>
                                    <div class="time fs-12 text-end">{{this.formattedCreatedAt}}</div>
                                </div>
                            </div>
                        </div>
                    </div>
                    {{else}}
                    <div class="message-by-others m-2">
                        <img src="/image/users.webp" class="avatar" style="width: 60px; height: 60px;">
                        <div class="d-flex flex-column align-items-start">
                            <div class="fs-14-bold">{{this.User.account}}</div>
                            <div class="my-1 p-2" style="background: rgb(235, 235, 235);border-radius: 6px;">
                                <div>
                                    <div class="new fs-12">{{this.content}}</div>
                                    <div class="time fs-12 text-end">{{this.formattedCreatedAt}}</div>
                                </div>
                            </div>
                        </div>
                    </div>
                    {{/if}}
                    {{/each}}
                    {{else}}
                    <span class="new fs-12" id="no-message-text">目前沒有任何訊息!</span>
                    {{/if}}
                </div>
            </div>
            <div class="right-part bg-light">
                <div class="right-part-top" id="online-user-box">
                    <div class="online-box d-flex flex-row">
                        <span class="fs-14-bold">上線</span>
                        <span class="online-icon"></span>
                    </div>
                    {{!-- 上線使用者清單，預設為所有加入groupChat的使用者，由socket事件控制減少項目 --}}
                    {{#each unfoldedGroupChat.RegisteredUsers}}
                    <div class="online-user" data-user-id="{{this.id}}">
                        <img src="/image/users.webp" alt="user-avatar" class="user-avatar">
                        <span class="user-account fs-12 fw-bold">{{this.account}}</span>
                    </div>
                    {{/each}}
                </div>
                <hr>
                <div class="right-part-bottom" id="offline-user-box">
                    <div class="outline-box d-flex flex-row">
                        <span class="fs-14-bold">離線</span>
                        <span class="outline-icon"></span>
                    </div>
                    {{!-- 離線使用者清單，由socket事件控制增加項目 --}}
                </div>
            </div>
        </div>
        <form class="bottom-section send-message-wrapper bg-light" enctype='multipart/form-data'
            data-post-url="/api/users/loginUser/groupChats/{{unfoldedGroupChat.id}}/groupMessages"
            data-io-room="groupChat{{unfoldedGroupChat.id}}" data-login-user-id="{{user.id}}">
            <div class="if-file-box d-flex flex-row justify-content-start align-items-center">
                <div class="file-item">
                    <i class="fa fa-times"></i>
                    <span>有關漫威的神秘檔案.docs</span>
                </div>
                <div class="file-item">
                    <i class="fa fa-times"></i>
                    <span>有關漫威的神秘檔案.docs</span>
                </div>
                <div class="file-item">
                    <i class="fa fa-times"></i>
                    <span>有關漫威的神秘檔案.docs</span>
                </div>

            </div>
            <div class="send-message-box d-flex flex-row justify-content-between align-items-center">
                <div class="send-file-icon-box d-flex flex-row justify-content-around align-items-center">
                    <div class="icon-box-paperClip">
                        <label for="file">
                            <i class="fa fa-paperclip"></i>
                        </label>
                        <input type="file" name="file" id="file" style="display:none;">
                    </div>
                    <div class="icon-box-camera">
                        <i class="fa fa-camera"></i>
                    </div>
                </div>
                <div class="send-message">
                    <textarea name="message" id="message" class="message"></textarea>
                    <button type="submit" class="btn btn-outline-primary" id="submitBtn">送出</button>
                </div>
            </div>
        </form>
    </div>
</div>

<script>
    const msgDisplayer = document.querySelector('#msg-displayer')
    const sendMsgWrapper = document.querySelector('.send-message-wrapper')
    const messageInput = document.querySelector('#message')
    const fileInput = document.querySelector('#file')

    // 將卷軸置底
    msgDisplayer.scrollTop = msgDisplayer.scrollHeight

    // 監聽來自伺服器的chatMessage事件
    socket.on("chatMessage", (ioRoom, Sender, message, createdAt) => {
        const loginUserId = Number(sendMsgWrapper.dataset.loginUserId)

        // 在對話框加入訊息
        addMsgToMsgDisplayer(ioRoom, Sender, message, createdAt, loginUserId)
        // 在左列指定的chat item加入訊息
        addMsgToChatList(ioRoom, Sender, message, createdAt, loginUserId)
    })

    // 監聽來自伺服器的「上線使用者名單」事件
    socket.on('getOnlineUsers', (ioRoom, onlineRoomateIds) => {
        classifyOnlineAndOfflineUsers(ioRoom, onlineRoomateIds)
    })

    // 監聽來自伺服器的「新登入」事件
    socket.on('newLogin', (ioRoom, userId) => {
        const activeChat = document.querySelector('.room-item.active')
        const offlineRoomates = document.querySelectorAll('.right-part-bottom .online-user')

        // 更新所展開的groupMessage的登入使用者名單
        if ((activeChat.dataset.ioRoom === ioRoom) && offlineRoomates) {
            offlineRoomates.forEach(r => {
                if (Number(r.dataset.userId) === userId) {
                    const onlineUserBox = document.querySelector('#online-user-box')
                    onlineUserBox.appendChild(r)
                }
            })
        }
    })

    // 監聽來自伺服器的「登出」事件
    socket.on('newLogout', (ioRoom, userId) => {
        const activeChat = document.querySelector('.room-item.active')

        if (activeChat.dataset.ioRoom === ioRoom) {
            const onlineRoomates = document.querySelectorAll('.online-user')
            onlineRoomates.forEach(r => {
                if (Number(r.dataset.userId) === userId) {
                    const offlineUserBox = document.querySelector('#offline-user-box')
                    offlineUserBox.appendChild(r)
                }
            })
        }
    })

    // 訊息表單掛載監聽器，點擊送出事件
    sendMsgWrapper.addEventListener('submit', e => {
        e.preventDefault()
        const submitBtn = document.querySelector('#submitBtn')
        const postURL = sendMsgWrapper.dataset.postUrl
        const formData = new FormData(sendMsgWrapper)

        // disable送出按紐
        submitBtn.disabled = true
        submitBtn.innerText = '發送中'

        axios
            .post(postURL, formData, { headers: { 'Content-Type': 'multipart/form-data' } })
            .then((response) => {
                if (response.data.status === 'success') {
                    const ioRoom = sendMsgWrapper.dataset.ioRoom
                    const { User, content, formattedCreatedAt } = response.data.message
                    const message = messageInput.value

                    // 發送chatMessage事件給伺服器
                    socket.emit("chatMessage", ioRoom, User, content, formattedCreatedAt)

                    // 清空input的值、恢復送出按紐功能
                    messageInput.value = ''
                    submitBtn.disabled = false
                    submitBtn.innerText = '送出'
                }
            })
            .catch((err) => {
                console.log(err)
            })
    })

    // 左側聊天項目掛載監聽器，監聽點擊事件
    const chats = document.querySelectorAll('.room-item')
    chats.forEach(c => {
        c.addEventListener('click', e => {
            const roomItem = e.currentTarget
            if (!roomItem.classList.contains('active')) {
                const ioRoom = roomItem.dataset.ioRoom
                const URL = roomItem.dataset.url
                roomItem.disabled = true

                updateChatActiveStatus(ioRoom)
                axios.get(URL)
                    .then((response) => {
                        if (response.data.status === 'success') {
                            buildChatDetails(response.data)
                        }
                        roomItem.disabled = false
                    })
                    .catch((err) => {
                        console.log(err)
                        roomItem.disabled = false
                    })
            }
        })
    })


    function addMsgToMsgDisplayer(ioRoom, Sender, message, createdAt, loginUserId) {
        const msgDisplayer = document.querySelector('#msg-displayer')
        const noMessageText = document.querySelector('#no-message-text')
        let newMessageDiv
        

        if (noMessageText) noMessageText.parentNode.removeChild(noMessageText)

        if (Sender.id === loginUserId) {
            // 製作自己發送的訊息節點
            newMessageDiv = buildMessageFromUser(message, createdAt)
        } else {
            // 製作他人發送的訊息節點
            newMessageDiv = buildMessageFromOther(message, createdAt, Sender.account)
        }
        // 在對話框加入訊息
        msgDisplayer.appendChild(newMessageDiv)
        // 下滑scrollbar到底
        msgDisplayer.scrollTop = msgDisplayer.scrollHeight
    }

    function addMsgToChatList(ioRoom, Sender, message, createdAt, loginUserId) {
        const targetChatItem = document.querySelector(`.room-item[data-io-room=${ioRoom}]`)
        const chatNameAndNew = targetChatItem.children[1]
        const chatTimeAndRead = targetChatItem.children[2]
        const isLoginUser = Sender.id === loginUserId
        const senderAlias = isLoginUser ? '你' : Sender.account
        const messageCut = message.substring(0, 14) + '...'

        // 在左列指定的chat item加入最新訊息
        chatNameAndNew.children[1].innerText = `${senderAlias}: ${messageCut}`
        // 顯示訊息時間
        chatTimeAndRead.children[0].innerText = createdAt
    }

    function updateChatActiveStatus(ioRoom) {
        const roomItems = document.querySelectorAll('.room-item')
        roomItems.forEach(r => {
            if (r.classList.contains('active')) { r.classList.remove('active') }
             else {
                if (r.dataset.ioRoom === ioRoom) { r.classList.add('active') }
            }
        })
    }

    function buildChatDetails(data) {
        if (data.unfoldedGroupChat) {
            const roomInfoWrapper = document.querySelector('#room-info-wrapper')
            const msgDisplayer = document.querySelector('#msg-displayer')
            roomInfoWrapper.innerHTML = buildRoomInfo(data.unfoldedGroupChat.name, data.unfoldedGroupChat.User.account)
            msgDisplayer.innerHTML = buildMessags(data.unfoldedGroupChat.Group_messages)
            cleanOnlineAndOfflineUserBox()
            appendUsersToOnlineUserBox(data.unfoldedGroupChat.RegisteredUsers)
            emitFetchOnlineUsersEvent(data.unfoldedGroupChat.id)
            updateFormUrlAndIoRoom(data.unfoldedGroupChat.id)
            msgDisplayer.scrollTop = msgDisplayer.scrollHeight

        }
    }

    function buildRoomInfo(name, userAccount) {
        return newTemplate = `
            <div class="room-info d-flex flex-row align-items-center">
                <img src="/image/users.webp" alt="" class="avatar">
                <div class="nameAndTime-box d-flex flex-column align-items-start">
                    <span class="room-name fs-14-bold">${name}</span>
                    <span class="room-createBy fs-12">Group chat initialized by ${userAccount}</span>
                </div>
            </div>
            <form action="" method="POST" class="out-room">
                <button class="btn btn-danger" type="submit">退出話題</button>
            </form>
        `
    }

    function buildMessags(messages) {
        const tempDiv = document.createElement('div')
        
        if (messages.length === 0) {
            tempDiv.innerHTML = '<span class="new fs-12" id="no-message-text">目前沒有任何訊息!</span>'
        } else {
            messages.forEach(m => {
                if (m.isLoginUser) {
                    tempDiv.appendChild(buildMessageFromUser(m.content, m.formattedCreatedAt))
                }
                else {
                    tempDiv.appendChild(buildMessageFromOther(m.content, m.formattedCreatedAt, m.User.account))
                }
            })
        }

        return tempDiv.innerHTML
    }
    function cleanOnlineAndOfflineUserBox() {
        const previousRoomUsers = document.querySelectorAll('.online-user')
        previousRoomUsers.forEach(u=> u.parentNode.removeChild(u))
    }
    function appendUsersToOnlineUserBox(users) {
        users.forEach(u => {
            const onlineUserBox =document.querySelector('#online-user-box')
            const userItem = document.createElement('div')
            
            userItem.classList.add('online-user')
            userItem.dataset.userId = u.id
            userItem.innerHTML = `
                <img src="/image/users.webp" alt="user-avatar" class="user-avatar">
                <span class="user-account fs-12 fw-bold">${u.account}</span>
            `
            onlineUserBox.appendChild(userItem)
        })
    }
    
    function emitFetchOnlineUsersEvent(groupId) {
        // 發送fetchOnlineUsers事件給伺服器，預期收到getOnlineUsers事件
        socket.emit("fetchOnlineUsers", groupId)
    }

    function classifyOnlineAndOfflineUsers(ioRoom, onlineRoomateIds) {
        const activeChat = document.querySelector('.room-item.active')
            // 在所展開的groupMessage右側顯示登入使用者清單
            if (activeChat.dataset.ioRoom === ioRoom) {
                const defaultOnlineRoomates = document.querySelectorAll('.online-user')
                defaultOnlineRoomates.forEach(r => {
                    if (!onlineRoomateIds.includes(Number(r.dataset.userId))) {
                        const offlineUserBox = document.querySelector('#offline-user-box')
                        offlineUserBox.appendChild(r)
                    }
                })
            }
    }
    function updateFormUrlAndIoRoom(groupId) {
        const sendMessageWrapper = document.querySelector('.send-message-wrapper')
        sendMessageWrapper.dataset.postUrl = `/api/users/loginUser/groupChats/${groupId}/groupMessages`
        sendMessageWrapper.dataset.ioRoom = `groupChat${groupId}` 
    }

    function buildMessageFromUser(message, createdAt) {
        const messageContainer = document.createElement('div')
        messageContainer.classList.add('d-flex', 'flex-row-reverse')
        messageContainer.innerHTML = `
                        <div class="d-flex flex-column align-items-start">
                            <div class="m-2 p-2"
                                style="background: rgb(16, 16, 253); color: #fff; border-radius: 6px;">
                                <div>
                                    <div class="new fs-12">${message}</div>
                                    <div class="time fs-12 text-end">${createdAt}</div>
                                </div>
                            </div>
                        </div>
                    `
        return messageContainer
    }

    function buildMessageFromOther(message, createdAt, SenderAccount) {
        const messageContainer = document.createElement('div')
        messageContainer.classList.add('message-by-others', 'm-2')
        messageContainer.innerHTML = `
            <img src="/image/users.webp" class="avatar" style="width: 60px; height: 60px;">
            <div class="d-flex flex-column align-items-start">
            <div class="fs-14-bold">${SenderAccount}</div>
                <div class="m-1 p-2" style="background: rgb(235, 235, 235);border-radius: 6px;">
                    <div>
                        <div class="new fs-12">${message}</div>
                        <div class="time fs-12 text-end">${createdAt}</div>
                    </div>
                 </div>
            </div>
        `
        return messageContainer
    }
</script>